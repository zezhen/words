<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>this is zezhen</title>
  <subtitle>starting here</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zezhen.github.io/"/>
  <updated>2016-03-04T07:09:44.000Z</updated>
  <id>http://zezhen.github.io/</id>
  
  <author>
    <name>zezhen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Manage Oneself</title>
    <link href="http://zezhen.github.io/posts/manage-oneself/"/>
    <id>http://zezhen.github.io/posts/manage-oneself/</id>
    <published>2015-09-16T06:40:41.000Z</published>
    <updated>2016-03-04T07:09:44.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/manageself.png&quot; width=&quot;250&quot; height=&quot;250&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;What-are-my-Strengths&quot;&gt;&lt;a href=&quot;#What-are-my-Strengths&quot; class=&quot;headerlink&quot; title=&quot;What are my Strengths?&quot;&gt;&lt;/a&gt;What are my Strengths?&lt;/h1&gt;&lt;p&gt;The only way to discover your strengths is through feedback analysis. Whenever you make a key decision or take a key action, write down what you expect will happen. Nice or 12 months later, compare the actual results with your expectations.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;it will show you what you are doing or failing to do that deprives you of the full benefits of your strengths&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it will show you where you are not particularly competent&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;it will show you where you have no strengths and cannot perform&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;First and foremost, concentrate on your strengths. (put yourself where your strengths can produce results)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Work on improving your strengths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Discover where your intellectual arrogance os caisomg disabling ignorance and overcome it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Go to work on acquiring the skills and knowledge you need to fully realize your strengths.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Remedy your bad habits - the things you do ro fail to do that inhibit your effectiveness and performance.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One should waste as little effort as possible on improving areas of low competence. It takes far more energy and work to improve from incompetence to mediocrity that it takes to improve from first-rate performance to excellence.&lt;/p&gt;
&lt;h1 id=&quot;How-do-I-Perform&quot;&gt;&lt;a href=&quot;#How-do-I-Perform&quot; class=&quot;headerlink&quot; title=&quot;How do I Perform?&quot;&gt;&lt;/a&gt;How do I Perform?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Am I a reader or a listener?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;How do I learn? via listening, writing, etc&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do I work well with people or am I a loner?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Do I perform well under stress, or do I need a highly structured and predictable environment?&lt;/p&gt;
&lt;p&gt;  Do not try to change yourself - you are unlikely to succeed. But work hard to improve the way you perform.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;What-are-My-Values&quot;&gt;&lt;a href=&quot;#What-are-My-Values&quot; class=&quot;headerlink&quot; title=&quot;What are My Values?&quot;&gt;&lt;/a&gt;What are My Values?&lt;/h1&gt;&lt;h1 id=&quot;Where-do-I-Belong&quot;&gt;&lt;a href=&quot;#Where-do-I-Belong&quot; class=&quot;headerlink&quot; title=&quot;Where do I Belong?&quot;&gt;&lt;/a&gt;Where do I Belong?&lt;/h1&gt;&lt;p&gt;Successful careers are not planned. They develop when people are prepared for opportunities because the knew their strengths, their method of work, and their values.&lt;/p&gt;
&lt;h1 id=&quot;What-should-I-Contribute&quot;&gt;&lt;a href=&quot;#What-should-I-Contribute&quot; class=&quot;headerlink&quot; title=&quot;What should I Contribute?&quot;&gt;&lt;/a&gt;What should I Contribute?&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;What does the situation require?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Given my strengths, my way of performing, and my values, how can I make the greatest contribution to what needs to be done?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;What results have to be achieved to make a difference?&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Make a plan that can cover no more that 18 months and still be resonably clear and specific&lt;/p&gt;
&lt;h1 id=&quot;Responsibility-for-Relationship&quot;&gt;&lt;a href=&quot;#Responsibility-for-Relationship&quot; class=&quot;headerlink&quot; title=&quot;Responsibility for Relationship&quot;&gt;&lt;/a&gt;Responsibility for Relationship&lt;/h1&gt;&lt;h1 id=&quot;The-Second-Half-of-Your-Life&quot;&gt;&lt;a href=&quot;#The-Second-Half-of-Your-Life&quot; class=&quot;headerlink&quot; title=&quot;The Second Half of Your Life&quot;&gt;&lt;/a&gt;The Second Half of Your Life&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Start a new one, new challenge&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop a parallel career, e.g. non-profit org, takes about ten hours a week.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop second major interest, and to develop it earlier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cqu.edu.au/__data/assets/pdf_file/0004/26833/Managing-Oneself-Full-Article.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Manager Oneself pdf&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/manageself.png&quot; width=&quot;250&quot; height=&quot;250&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;What-are-my-Strengths&quot;&gt;&lt;a href=&quot;#What-are-my-Strengths&quot; class=&quot;heade
    
    </summary>
    
      <category term="life" scheme="http://zezhen.github.io/categories/life/"/>
    
    
      <category term="read" scheme="http://zezhen.github.io/tags/read/"/>
    
  </entry>
  
  <entry>
    <title>Java Code Standards</title>
    <link href="http://zezhen.github.io/posts/java-code-standards/"/>
    <id>http://zezhen.github.io/posts/java-code-standards/</id>
    <published>2013-11-23T18:37:41.000Z</published>
    <updated>2016-03-04T19:24:04.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Why-code-standards-are-important&quot;&gt;&lt;a href=&quot;#Why-code-standards-are-important&quot; class=&quot;headerlink&quot; title=&quot;Why code standards are important&quot;&gt;&lt;/a&gt;Why code standards are important&lt;/h1&gt;&lt;p&gt;Coding standards for Java are important because they lead to greater consistency within code of all developers. Consistency leads to code that is easier to understand, which in turn results in a code, which is easier to develop and maintain.&lt;/p&gt;
&lt;h1 id=&quot;Principles&quot;&gt;&lt;a href=&quot;#Principles&quot; class=&quot;headerlink&quot; title=&quot;Principles&quot;&gt;&lt;/a&gt;Principles&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;General&lt;ul&gt;
&lt;li&gt;Adhere to the style of original.&lt;/li&gt;
&lt;li&gt;Adhere to the Principle of Least Astonishment.&lt;/li&gt;
&lt;li&gt;Do it right the first time. Don’t create development debt.&lt;/li&gt;
&lt;li&gt;Document any deviations.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;DRY Principle&lt;ul&gt;
&lt;li&gt;DRY: Don’t Repeat Yourself. &lt;/li&gt;
&lt;li&gt;DIE: Duplication is Evil.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;OO Design Principles&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Code-Layout&quot;&gt;&lt;a href=&quot;#Code-Layout&quot; class=&quot;headerlink&quot; title=&quot;Code Layout&quot;&gt;&lt;/a&gt;Code Layout&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;eclipse format xml&lt;/p&gt;
&lt;p&gt; A lot of code layout rule, such as the indent space number, where to place the brace, maximum line length, can be formatted by eclipse automatically. Here is the &lt;a href=&quot;https://github.com/zezhen/usefulstuff/blob/master/java/stuffs/eclipse-format.xml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;eclipse-format.xml&lt;/a&gt;, you can import it in eclipse via “Preference -&amp;gt; Java -&amp;gt; Code Style -&amp;gt; Formatter”, and format the code by “Command+Shift+F” or set the “Java -&amp;gt; Editor&amp;gt; Save Actions”. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Avoid Deep Nesting&lt;/p&gt;
&lt;p&gt; Too many levels of nesting can make code harder to read and follow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Blank Lines and Code Grouping&lt;/p&gt;
&lt;p&gt; Use blank between logical sections inside a method to improve readability. It can also help to refactor code.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Use “Command+Shift+O” to format the import statements in eclipse.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Comments&quot;&gt;&lt;a href=&quot;#Comments&quot; class=&quot;headerlink&quot; title=&quot;Comments&quot;&gt;&lt;/a&gt;Comments&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;the best code is self-documenting!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;When writing your comments, write for your audience: the next contributor who will need to understand your code. Be generous — the next one may be you!&lt;/li&gt;
&lt;li&gt;Code should be commented to indicate what the code does (the intent, purpose or usage), rather than how it works internally,&lt;/li&gt;
&lt;li&gt;Keep comments and code in sync.&lt;/li&gt;
&lt;li&gt;Purpose of the comment is to explain code that doesn’t explain itself.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Block-Comments&quot;&gt;&lt;a href=&quot;#Block-Comments&quot; class=&quot;headerlink&quot; title=&quot;Block Comments&quot;&gt;&lt;/a&gt;Block Comments&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Use standard to hide code without removing it if it may be needed. (eclipse shortcut: command+shift+/)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Inline-Comments-command&quot;&gt;&lt;a href=&quot;#Inline-Comments-command&quot; class=&quot;headerlink&quot; title=&quot;Inline Comments (command+/)&quot;&gt;&lt;/a&gt;Inline Comments (command+/)&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Do not put inline comment on the same line as a statement (trailing).&lt;/li&gt;
&lt;li&gt;If line deserves comment, it most often should be treated as logical block with comment and so have to have blank lines around. &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;JavaDoc-Comments&quot;&gt;&lt;a href=&quot;#JavaDoc-Comments&quot; class=&quot;headerlink&quot; title=&quot;JavaDoc Comments&quot;&gt;&lt;/a&gt;JavaDoc Comments&lt;/h3&gt;&lt;p&gt;(type /** before method or class and type ‘enter’)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Describe programming interface before your write the code. This can be your “design phase”.&lt;/li&gt;
&lt;li&gt;Write summary descriptions that stand alone. First sentence must summarize behaviour.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Naming-Convention&quot;&gt;&lt;a href=&quot;#Naming-Convention&quot; class=&quot;headerlink&quot; title=&quot;Naming Convention&quot;&gt;&lt;/a&gt;Naming Convention&lt;/h1&gt;&lt;p&gt;Use full English descriptors that accurately describe the variable/field/class/interface, avoid acronyms and abbreviations and use the &lt;strong&gt;CamelCase&lt;/strong&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Rules&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Interfaces&lt;/td&gt;
&lt;td&gt;nouns, prefix letter “I” to the interface name, or end with “able”&lt;/td&gt;
&lt;td&gt;IHbaseDAO Serializable&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Classes&lt;/td&gt;
&lt;td&gt;nouns, prefix  “Abstract” to abstract class&lt;/td&gt;
&lt;td&gt;CorporateCustomer AbstractShape&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Methods&lt;/td&gt;
&lt;td&gt;verbs, first letter lowercase&lt;/td&gt;
&lt;td&gt;run(), openAccout()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Constants&lt;/td&gt;
&lt;td&gt;all uppercase with words separated by underscore(“_”), typically implemented as static final fields of classes&lt;/td&gt;
&lt;td&gt;&lt;code&gt;int MAX_ITERATIONS = 25;  int getMaxIterations(){return 25;}&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Variables&lt;/td&gt;
&lt;td&gt;Fields that are collections, such as arrays or vectors, should be given names that are plural to indicate that they represent multiple values. If the name of the field begins with an acronym then the acronym should be completely in lower case&lt;/td&gt;
&lt;td&gt;items, htmlParser&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Components&lt;/td&gt;
&lt;td&gt;Use full English descriptor postfixed by the widget type.&lt;/td&gt;
&lt;td&gt;okButton (customerList or customers? what’s about the set and map ?)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Value-Accessor&quot;&gt;&lt;a href=&quot;#Value-Accessor&quot; class=&quot;headerlink&quot; title=&quot;Value Accessor&quot;&gt;&lt;/a&gt;Value Accessor&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Don’t make any instance or class variable public without good reason&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Rules&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Class Field&lt;/td&gt;
&lt;td&gt;use Getters/Setters to access it(they can be generated by eclipse automatically); “is” operation for boolean field&lt;/td&gt;
&lt;td&gt;int getValue(); void setValue(int value);boolean isAlive();&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Collections&lt;/td&gt;
&lt;td&gt;take list as an example, getList, then add/remove, or getIterator, add, remove? List&lt;string&gt; getList();? or Iterator&lt;string&gt; getIterator(); void add(String value); String get(int index);&lt;/string&gt;&lt;/string&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Static Field&lt;/td&gt;
&lt;td&gt;avoid using an object to access a class static variable or method&lt;/td&gt;
&lt;td&gt;a = new Integer(0); a.MAX_VALUE // Avoid; Integer.MAX_VALUE //prefer&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h1 id=&quot;Clean-Code&quot;&gt;&lt;a href=&quot;#Clean-Code&quot; class=&quot;headerlink&quot; title=&quot;Clean Code&quot;&gt;&lt;/a&gt;Clean Code&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Keep code where it belongs.&lt;/li&gt;
&lt;li&gt;Keep methods short. Consider anything over 20 lines a suspect.&lt;/li&gt;
&lt;li&gt;Have methods with only a few arguments - preferably no more than two&lt;/li&gt;
&lt;li&gt;Eliminate duplication in your code; use abstraction.&lt;/li&gt;
&lt;li&gt;Give public methods short names, but use long descriptive names for private methods. The code is the documentation.&lt;br&gt;*You need comprehensive tests, otherwise you do not dare to make changes in case something breaks. Test code should be of the same quality as production code; if your tests are slow and buggy, you will not use them or trust them.&lt;/li&gt;
&lt;li&gt;Don’t initialize variables to 0 or null where it’s not required (redundant), e.g. instance variables or call super() constructor where it is called automatically. Don’t clutter up your code.&lt;/li&gt;
&lt;li&gt;Keep the public API simple. If the method doesn’t need to be public, don’t make it so.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Code-Design&quot;&gt;&lt;a href=&quot;#Code-Design&quot; class=&quot;headerlink&quot; title=&quot;Code Design&quot;&gt;&lt;/a&gt;Code Design&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Use nested constructors to eliminate redundant code.&lt;/li&gt;
&lt;li&gt;Do not use System.exit().&lt;/li&gt;
&lt;li&gt;Try to keep methods limited to 20-30 lines. More then this is usually a symptom of poorly abstracted code.&lt;/li&gt;
&lt;li&gt;Avoid string concatenation (except when concatenation two or three strings), use StringBuilder (StringBuffer is syncronized and so is less efficient).&lt;/li&gt;
&lt;li&gt;Declare a local variable as close as possible to its first use.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Exceptions&quot;&gt;&lt;a href=&quot;#Exceptions&quot; class=&quot;headerlink&quot; title=&quot;Exceptions&quot;&gt;&lt;/a&gt;Exceptions&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Always know why you are catching an exception.&lt;/li&gt;
&lt;li&gt;Do not silently absorb a runtime or error exception.&lt;/li&gt;
&lt;li&gt;Catch only exceptions for which you have explicit handling. Don’t handle exceptions unless the procedure can fix the problem or unless the procedure is responsible for reporting errors.&lt;/li&gt;
&lt;li&gt;Only if your code really has a problem to continue e.g., when a parameter is invalid, feel free to throw an exception!&lt;/li&gt;
&lt;li&gt;Do not throw an exception, if you only suppose the caller of your code could have a problem with a special result. Try to return a special result value instead e.g., null, and let the caller decide with a regular if-else-statement. &lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// something may throw exception&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// log the exception message&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// continue or re-throw&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(Exception e) &amp;#123;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// must place at last position&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// do some clean job, like&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// if(connection != null)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//      connection.close();&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Integer.parseInt(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;(NumberFormatException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// not a integer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;Other-Practises&quot;&gt;&lt;a href=&quot;#Other-Practises&quot; class=&quot;headerlink&quot; title=&quot;Other Practises&quot;&gt;&lt;/a&gt;Other Practises&lt;/h1&gt;&lt;h3 id=&quot;Files-Methods-Line-length&quot;&gt;&lt;a href=&quot;#Files-Methods-Line-length&quot; class=&quot;headerlink&quot; title=&quot;Files/Methods/Line length&quot;&gt;&lt;/a&gt;Files/Methods/Line length&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Avoid lines longer than 80 characters?&lt;/li&gt;
&lt;li&gt;Files longer than 2000 lines are cumbersome and should be avoided. &lt;/li&gt;
&lt;li&gt;One method  should be 20-30, &amp;lt;50 lines&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Declaration&quot;&gt;&lt;a href=&quot;#Declaration&quot; class=&quot;headerlink&quot; title=&quot;Declaration&quot;&gt;&lt;/a&gt;Declaration&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Avoid assigning several variables to the same value in a single statement.&lt;br&gt; int a = b = 1; // Avoid&lt;/li&gt;
&lt;li&gt;One declaration per line is recommended since it encourages commenting.&lt;br&gt;int level; // indentation level&lt;br&gt;int size;  // size of table&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Why-code-standards-are-important&quot;&gt;&lt;a href=&quot;#Why-code-standards-are-important&quot; class=&quot;headerlink&quot; title=&quot;Why code standards are impor
    
    </summary>
    
      <category term="coding" scheme="http://zezhen.github.io/categories/coding/"/>
    
    
      <category term="java" scheme="http://zezhen.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Unit Test Best Practices</title>
    <link href="http://zezhen.github.io/posts/unit-test-best-practices/"/>
    <id>http://zezhen.github.io/posts/unit-test-best-practices/</id>
    <published>2013-10-15T18:13:00.000Z</published>
    <updated>2016-03-04T07:57:28.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;/img/unittest.jpg&quot; width=&quot;250&quot; height=&quot;250&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A good dev must be a good test!
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;The-Value-of-Unit-Tests&quot;&gt;&lt;a href=&quot;#The-Value-of-Unit-Tests&quot; class=&quot;headerlink&quot; title=&quot;The Value of Unit Tests&quot;&gt;&lt;/a&gt;The Value of Unit Tests&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;UTs give you confidence that your code works as you expect it to work, help in long-term development, such as code refactor.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;UTs provide excellent implicit documentation because they show exactly how the code is designed to be used.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;new members always begin with unit test, so well-written ut code is very helpful to understand existing project.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;How-to-Write-Unit-Tests&quot;&gt;&lt;a href=&quot;#How-to-Write-Unit-Tests&quot; class=&quot;headerlink&quot; title=&quot;How to Write Unit Tests&quot;&gt;&lt;/a&gt;How to Write Unit Tests&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Structure of UT code&lt;ol&gt;
&lt;li&gt;Set up all conditions for testing.&lt;ol&gt;
&lt;li&gt;necessary data should be created in test class, so that the tests don’t have to rely on external env.&lt;/li&gt;
&lt;li&gt;mock up object or method call to get special result.&lt;ul&gt;
&lt;li&gt;PowerMockito is very powerful, an example show in appendix.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Call the method (or Trigger) being tested.&lt;/li&gt;
&lt;li&gt;Verify that the results are correct.&lt;ul&gt;
&lt;li&gt;use assert statement to verify the result, if failed messages should be reported, the statement like “assert condition, message”.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Clean up.&lt;ul&gt;
&lt;li&gt;Any used resource or modified records should be clean up, so this UT method can repeat without any latent error.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Make each test case method test just one thing&lt;ol&gt;
&lt;li&gt;Any given behaviour should be specified in one and only one test.&lt;/li&gt;
&lt;li&gt;Otherwise if you later change that behaviour, you’ll have to change multiple tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Name testcase method to indicate what it test&lt;ol&gt;
&lt;li&gt;a name should describe the subject, condition and result(optional),&lt;/li&gt;
&lt;li&gt;for example: test_add_negative_positive(), from the name you can know this method is testing the add method with one negative and one positive input.&lt;/li&gt;
&lt;li&gt;you need a good method name rather than comment&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;What-to-Test&quot;&gt;&lt;a href=&quot;#What-to-Test&quot; class=&quot;headerlink&quot; title=&quot;What to Test&quot;&gt;&lt;/a&gt;What to Test&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Inputs&lt;ol&gt;
&lt;li&gt;divide all possible input data into into different subsets, and choose several representatives from each subset, both valid and invalid input, so you can cover all of the conditions.&lt;/li&gt;
&lt;li&gt;Normal conditions&lt;ul&gt;
&lt;li&gt;all the input make the code work right.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Unexpected conditions&lt;ol&gt;
&lt;li&gt;The division, for example “a = b / c”, when “c=0” is a bad input;&lt;/li&gt;
&lt;li&gt;The reference, for example “obj.call()”, when obj is null is bad;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Boundary condition (CORRECT)&lt;ol&gt;
&lt;li&gt;Conformance : Does the value conform to an expected format?&lt;/li&gt;
&lt;li&gt;Ordering : Is the set of values ordered or unordered as appropriate?&lt;/li&gt;
&lt;li&gt;Range: Is the value within reasonable minimum and maximum values?&lt;/li&gt;
&lt;li&gt;Reference : Does the code refer anything external that isn’t under direct control of the code itself?&lt;/li&gt;
&lt;li&gt;Existence: Does the value exist? (e.g. is non-null, non-zero, present in a set, etc)&lt;/li&gt;
&lt;li&gt;Cardinality : Are there exactly enough values?&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;When testing an integer, a positive, negative and zero should be test, but if #1 have be test, there is no need to test 10 or 100, it’s enough.&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;Time: Is everything happening in order? At right time? In time?&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Other&lt;ol&gt;
&lt;li&gt;check Inverse relationship&lt;/li&gt;
&lt;li&gt;cross-check using other means&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Properties-of-Well-Written-UT&quot;&gt;&lt;a href=&quot;#Properties-of-Well-Written-UT&quot; class=&quot;headerlink&quot; title=&quot;Properties of Well-Written UT&quot;&gt;&lt;/a&gt;Properties of Well-Written UT&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Through&lt;ol&gt;
&lt;li&gt;cover as many lines of code as possible&lt;/li&gt;
&lt;li&gt;cover each branch of conditional logic, including ternary operator.&lt;/li&gt;
&lt;li&gt;cover as many paths as possible, it is seems a very big deal.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;Repeatable&lt;ul&gt;
&lt;li&gt;Every one of your unit tests should be able to be run repeatedly and continue to produce the same results, regardless of the environment in which the tests are being run.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Independent&lt;ul&gt;
&lt;li&gt;make each test case independent to all the other&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Appendix&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.powermock.api.mockito.PowerMockito;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; org.powermock.core.classloader.annotations.PrepareForTest;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MockupRunner&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Test&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@PrepareForTest&lt;/span&gt;(Clz.class)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;testMethodMockUsingPowerMockito&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt; Exception &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Clz c = PowerMockito.mock(Clz.class);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PowerMockito.when(c.func()).thenCallRealMethod();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        PowerMockito.when(c, &lt;span class=&quot;string&quot;&gt;&quot;call&quot;&lt;/span&gt;).thenReturn(&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        c.func(); &lt;span class=&quot;comment&quot;&gt;// mock up call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Clz().func(); &lt;span class=&quot;comment&quot;&gt;// normal call&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Clz&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;func&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; rst = call();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(rst == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;normal call&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            System.out.println(&lt;span class=&quot;string&quot;&gt;&quot;mock up call&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;http://powermock.googlecode.com/svn/docs/powermock-1.3.7/apidocs/org/powermock/api/mockito/PowerMockito.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PowerMockito&lt;/a&gt; uses a custom classloader and bytecode manipulation to enable mocking of static methods, constructors, final classes and methods, private methods, removal of static initializers and more.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/unittest.jpg&quot; width=&quot;250&quot; height=&quot;250&quot;&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A good dev must be a good test!
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;The-Value-of-U
    
    </summary>
    
      <category term="coding" scheme="http://zezhen.github.io/categories/coding/"/>
    
    
      <category term="test" scheme="http://zezhen.github.io/tags/test/"/>
    
  </entry>
  
  <entry>
    <title>MapReduce Brief Explanation</title>
    <link href="http://zezhen.github.io/posts/mapreduce-brief-explanation/"/>
    <id>http://zezhen.github.io/posts/mapreduce-brief-explanation/</id>
    <published>2013-05-04T06:45:32.000Z</published>
    <updated>2016-03-04T07:50:35.000Z</updated>
    
    <content type="html">&lt;p&gt;刚开始学hadoop时, 一个完全没接触过的同学问我mapreduce到底怎样的? 我一下子没解释清楚, 后来想想可以举个简单例子来说明mapreduce.&lt;/p&gt;
&lt;p&gt;比如现在有很多很多普通的扑克牌, 每张都有花色和数字, 共4种花色(除大小王), 13中数字. 这些扑克牌杂乱的混合在一起, 而且存放在多个仓库中, 这是背景.&lt;/p&gt;
&lt;p&gt;应用场景一: 现在要统计每种花色有多少张扑克牌, 如何操作?&lt;/p&gt;
&lt;p&gt;方法一.&lt;/p&gt;
&lt;p&gt;把每个仓库中扑克牌用卡着运到一个控制中心, 然后工作人员一车一车, 一张一张的统计, 最后上报结果.&lt;/p&gt;
&lt;p&gt;该方法能够得到正确的结果, 但有两个弊端:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运输成本大. 其他仓库的扑克都要用卡车运输, 的确增加了GDP;&lt;/li&gt;
&lt;li&gt;工作分配不均. 控制中心的人忙得要死, 仓库的人却闲的慌.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法二.&lt;/p&gt;
&lt;p&gt;每个仓库的工作人员将本仓库中的扑克牌统计好后, 把结果用飞鸽传书交给控制中心事先确定的汇总中心, 汇总中心的人再汇总到所有仓库的结果就可以得到最后的统计结果了.&lt;/p&gt;
&lt;p&gt;这个方法的好处就是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;运输成本低. 飞鸽传书的量和卡车的比真是小巫见大巫啊;&lt;/li&gt;
&lt;li&gt;工作分配均匀. 每个仓库的工作人员都有活干, 不会给钱不干活;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;回到mapreduce, 方法一是传统的方法, 对应hadoop中, 相当于从hdfs依次读取所有文件到一台主机, 然后分析每一个数据得到结果; 方法二就是mapreduce的思想了, 分两部分.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;map()+combine()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;map()函数的一次执行相当于仓库人员的一次识别扑克, 他们每拿到一张扑克牌, 识别出花色, 然后添加一条记录, 比如方块扑克一张. 这样, 仓库有多少张扑克牌, 就有多少条记录.&lt;br&gt;combine()函数相当于综合统计, 计算出每种花色的总和再飞鸽传书, 不然这么多记录传, 虽然打包了但鸽子还是要飞瘫掉的;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;reduce()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;reduce()函数对应的汇总中心人员的工作,  汇总各仓库的结果就是将各个map()的结果合并, 最后输出.&lt;br&gt;此处reduce只有一个, 如果分配4个汇总中心, 每个中心只处理一种花色, 那每个仓库就要给对应花色的中心传送结果了.&lt;/p&gt;
&lt;p&gt;应用场景一比较简单, 复杂点的比如统计每种扑克牌(相同花色和数字)的数量, 对扑克牌排序(首先黑桃&amp;gt;红桃&amp;gt;梅花&amp;gt;方块, 再按数字从大到小), 构造同花顺等等.&lt;/p&gt;
&lt;p&gt;以上只是用统计扑克的例子简单介绍mapreduce的思想, 一个mapreduce job如下图所示包含4个步骤, DataLoad中涉及InputFormat, 主要是对split的处理; Map对数据按key进行分配; Shuffle对记录整理排序; Reduce汇总记录并输出.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/mapreduce.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;刚开始学hadoop时, 一个完全没接触过的同学问我mapreduce到底怎样的? 我一下子没解释清楚, 后来想想可以举个简单例子来说明mapreduce.&lt;/p&gt;
&lt;p&gt;比如现在有很多很多普通的扑克牌, 每张都有花色和数字, 共4种花色(除大小王), 13中数字. 这些扑
    
    </summary>
    
      <category term="bigdata" scheme="http://zezhen.github.io/categories/bigdata/"/>
    
    
      <category term="hadoop" scheme="http://zezhen.github.io/tags/hadoop/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu的备份和还原</title>
    <link href="http://zezhen.github.io/posts/ubuntu-backup-x-restore/"/>
    <id>http://zezhen.github.io/posts/ubuntu-backup-x-restore/</id>
    <published>2013-04-07T03:33:52.000Z</published>
    <updated>2016-03-04T07:42:58.000Z</updated>
    
    <content type="html">&lt;p&gt;如&lt;a href=&quot;/posts/grub-rescue/&quot;&gt;ubuntu安装到移动硬盘 &amp;amp; grub rescue问题解决&lt;/a&gt;中介绍的, 将ubuntu成功安装到移动硬盘上, 并能够到处用, 但总觉得系统运行速度上不太满意, 想想以后如果服务都在移动硬盘上跑, 感觉不靠谱啊. 总之, 心里就是不舒服, 考虑着是否能够方便的迁移整个系统呢, 于是就想到了ghost.&lt;/p&gt;
&lt;p&gt;在网上搜了一通, 结果说没有ubuntu ghost一说, 只能通过各种操作才能实现系统备份恢复. linux还不熟, 心里虚, 找啊找, 终于发现了UCloner这东西.&lt;/p&gt;
&lt;p&gt;UCloner (原名ubuntu-cloner)可实现Ubuntu系统的备份, 恢复, 克隆; 还提供图形界面, 不过目前只支持10.10, 10.04, 9.10等; 项目主页：&lt;a href=&quot;http://code.google.com/p/ucloner/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://code.google.com/p/ucloner/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UCloner的功能&lt;/p&gt;
&lt;p&gt;#1. 备份&lt;/p&gt;
&lt;p&gt;将当前系统备份为squashfs映像文件, 备份是会自动排出常规挂载目录/mnt和/media等, 可以手动增删备份的目录. 备份前需要安装squashfs-tools.&lt;/p&gt;
&lt;p&gt;#2. 恢复&lt;/p&gt;
&lt;p&gt;从映像文件恢复系统, 此操作必须在另一个系统中进行, 如上面提到的live cd, 不过得注意两个系统的版本.&lt;/p&gt;
&lt;p&gt;恢复时, 图形界面提供三个可选分区: /, /home和swap, /分区及其系统文件必须指定, 另外两个可选择(swap最好设一个);&lt;/p&gt;
&lt;p&gt;grub安装位置提供三个选择：”留空”, “目标根分区”或”目标根分区所在硬盘”.&lt;br&gt;如果留空，则不安装 grub。&lt;br&gt;如果选”目标根分区”(如 /dev/sda5)，将把 grub 安装到该分区的引导扇区。&lt;br&gt;如果选”目标根分区所在硬盘”(如 /dev/sda ), 将把 grub 安装到该硬盘 MBR.&lt;/p&gt;
&lt;p&gt;最后新主机名如果为空, 则保持原主机名.&lt;/p&gt;
&lt;p&gt;#3. 克隆&lt;/p&gt;
&lt;p&gt;相当于备份+恢复, 直接把当前系统复制到其他分区中, 可选择不同硬盘, 不用生成映像文件.&lt;/p&gt;
&lt;p&gt;———昏割线————&lt;/p&gt;
&lt;p&gt;p.s. linux可以打包备份和还原, 可在运行的系统上进行, 也不失为一个好方法. 只是恢复时当前系统的版本需要和备份版本相同, 不然容易出错, 毕竟不同版本的系统还是有所差别的, 备份文件只是覆盖, 原来存在的多余文件不会删除.&lt;/p&gt;
&lt;p&gt;备份:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo tar -cvpzf /media/ubuntu_backup.tgz --exclude=/proc --exclude=/sys --exclude=/tmp --exclude=/mnt --exclude=/media --exclude=/boot/grub --exclude=/etc/fstab --exclude=/etc/mtab --exclude=/etc/blkid.tab --exclude=/etc/udev/rules.d/70-persistent-net.rules --exclude=/lost+found --exclude=/home/lost+found --exclude=/home/*/.gvfs /&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;sudo为了获得root权限; tar为打包命令; 最后的/为根目录, 即要打包的文件; –exclude为排除的目录;&lt;/p&gt;
&lt;p&gt;还原:&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo tar -xvpzf /media/ubuntu_backup.tgz -C /&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;将备份文件恢复到根目录下.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;如&lt;a href=&quot;/posts/grub-rescue/&quot;&gt;ubuntu安装到移动硬盘 &amp;amp; grub rescue问题解决&lt;/a&gt;中介绍的, 将ubuntu成功安装到移动硬盘上, 并能够到处用, 但总觉得系统运行速度上不太满意, 想想以后如果服务都在移动硬盘上跑,
    
    </summary>
    
      <category term="stuff" scheme="http://zezhen.github.io/categories/stuff/"/>
    
    
      <category term="linux" scheme="http://zezhen.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>ubuntu安装到移动硬盘&amp;grub rescue问题解决</title>
    <link href="http://zezhen.github.io/posts/grub-rescue/"/>
    <id>http://zezhen.github.io/posts/grub-rescue/</id>
    <published>2013-04-04T06:25:43.000Z</published>
    <updated>2016-03-04T07:57:39.000Z</updated>
    
    <content type="html">&lt;p&gt;想好好折腾linux, 选择ubuntu入手, 但想到linux下配置啥的挺麻烦, 装个系统最好能长久用下去, 于是就将ubuntu安装到移动硬盘上, 这样到哪都好用了.&lt;/p&gt;
&lt;p&gt;如何在ubuntu安装到移动硬盘?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先制作一个u盘版的livecd. 这个可以用&lt;a href=&quot;https://fedorahosted.org/liveusb-creator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Fedora LiveUSB Creator&lt;/a&gt;, 兼容Ubuntu 几分钟就搞定了&lt;/li&gt;
&lt;li&gt;选择从u盘启动, 进入livecd系统, 相当于体验版. 选择安装Ubuntu, 注意分区选择移动硬盘, 挂载点最简单的是根目录和swap, 其他按序挂载; 最后”安装启动引导器的设备”选择移动硬盘, 如sda, 而不是它的某个分区, 如sda1, 这样系统就可以从移动硬盘启动了.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;只要简单两步就安装完成了, 同理如果把ubuntu安装到U盘上也是一样的.&lt;/p&gt;
&lt;p&gt;装完后在自己电脑上成功启动, 但换个电脑就不行了. 按照对linux启动的了解, 启动的先后顺序是BIOS, MBR, BootLoader, OS. 已经系统的grub(GRand Unified Bootloader)安装到移动硬盘上了, 从移动硬盘启动时, MBR能直接识别Grub以启动系统, 在自己电脑上试验成功说明安装的确是成功的.&lt;/p&gt;
&lt;p&gt;tips. 事实上, 这个版本系统是用UCloner克隆到移动硬盘上, 或许问题出在此.&lt;/p&gt;
&lt;p&gt;在其他电脑上启动时, 无法启动grub, 而是进入了grub rescue, 显示信息为&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;error: unknown filesystems&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;grub rescue&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;网上遇到这个问题多数是安装了windows+ubuntu双系统后, 在windows对磁盘重新分区导致的, 与我在移动硬盘上的ubuntu在别的电脑上运行类似, 疑问: 为什么grub启动跟其他磁盘或分区有关系呢?&lt;/p&gt;
&lt;p&gt;在grub rescue中通过ls查看分盘和分区, 如果ls (hd0,6)/boot/grub显示信息, 说明(hd0,6)是安装/boot的分区, 可通过以下命令进入系统&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;set root=(hd0,6)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;set prefix=(hd0,6)/boot/grub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;insmod normal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;normal&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# after getting into ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo update-grub&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo grub-install /dev/sda&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但本人ls每个个分区都是出错, set命令显示的boot和prefix都是指向实际的’/‘分区.&lt;/p&gt;
&lt;p&gt;继续搜索网上解决方法, 多是reinstalling GRUB from the LiveCD, 如下:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo mount /dev/sda4 /mnt&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo grub-install  --boot-directory=/mnt/boot /dev/sda&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# sda4 is the / partition, so sda is the disk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# Back in Ubuntu&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo update-grub&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但本人试过这个方法, 没有成功.&lt;/p&gt;
&lt;p&gt;后来在网上搜到了这句话: Some bioses have a maximum read capability of 137GB and will therefore not find boot files which are on the disc after that limit.&lt;/p&gt;
&lt;p&gt;有些bios的读取磁盘能力有限, 只能读前137G大小的内容. 这才发现最初因为移动硬盘前面部分存了几百G的资料, 为省力直接在磁盘后面部分划分出空闲空间作为linux分区. 重新将linux安装到移动硬盘前面部分, 便可以到处启动啦, 真心坑爹啊!!&lt;/p&gt;
&lt;p&gt;p.s. 下面是两个启动信息分析工具, 如有其它问题, 可以检测后, 贴到论坛让大牛们帮忙分析:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/Boot-Info&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Boot-Repair&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://bootinfoscript.sourceforge.net/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Boot Info Script&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;想好好折腾linux, 选择ubuntu入手, 但想到linux下配置啥的挺麻烦, 装个系统最好能长久用下去, 于是就将ubuntu安装到移动硬盘上, 这样到哪都好用了.&lt;/p&gt;
&lt;p&gt;如何在ubuntu安装到移动硬盘?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先制作一个u盘版的liv
    
    </summary>
    
      <category term="stuff" scheme="http://zezhen.github.io/categories/stuff/"/>
    
    
      <category term="linux" scheme="http://zezhen.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
